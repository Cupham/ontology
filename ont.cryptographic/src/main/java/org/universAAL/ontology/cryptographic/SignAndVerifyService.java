/*******************************************************************************
 * Copyright 2016 Universidad Polit√©cnica de Madrid UPM
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 ******************************************************************************/
package org.universAAL.ontology.cryptographic;

import java.util.ArrayList;
import java.util.List;

import org.universAAL.middleware.rdf.Resource;


/**
 * Ontological representation of SignAndVerifyService in the cryptographic ontology. 
 * Methods included in this class are the mandatory ones for representing an
 * ontological concept in Java classes for the universAAL platform. In addition
 * getters and setters for properties are included.
 * 
 * @author 
 * @author Generated by the OntologyUML2Java transformation of AAL Studio
 */
public class SignAndVerifyService extends CryptographicService {
  public static final String MY_URI = CryptographicOntology.NAMESPACE
    + "SignAndVerifyService";
  public static final String PROP_SIGN = CryptographicOntology.NAMESPACE
    + "sign";
  public static final String PROP_SIGNED_RESOURCE = CryptographicOntology.NAMESPACE
    + "signedResource";
  public static final String PROP_ASYMMETRIC = CryptographicOntology.NAMESPACE
    + "asymmetric";
  public static final String PROP_KEY_RING = CryptographicOntology.NAMESPACE
    + "keyRing";
  public static final String PROP_VERIFICATION_RESULT = CryptographicOntology.NAMESPACE
    + "verificationResult";
  public static final String PROP_DIGEST = CryptographicOntology.NAMESPACE
    + "digest";


  public SignAndVerifyService () {
    super();
  }
  
  public SignAndVerifyService (String uri) {
    super(uri);
  }

  public String getClassURI() {
    return MY_URI;
  }
  
  public int getPropSerializationType(String propURI) {
    if (PROP_SIGN.equals(propURI))
      return PROP_SERIALIZATION_FULL;
    if (PROP_SIGNED_RESOURCE.equals(propURI))
      return PROP_SERIALIZATION_FULL;
    if (PROP_ASYMMETRIC.equals(propURI))
      return PROP_SERIALIZATION_FULL;
    if (PROP_KEY_RING.equals(propURI))
      return PROP_SERIALIZATION_FULL;
    if (PROP_VERIFICATION_RESULT.equals(propURI))
      return PROP_SERIALIZATION_FULL;
    if (PROP_DIGEST.equals(propURI))
      return PROP_SERIALIZATION_FULL;
    return super.getPropSerializationType(propURI);
  } 

  public boolean isWellFormed() {
	return super.isWellFormed() 
      && hasProperty(PROP_SIGN)
      && hasProperty(PROP_SIGNED_RESOURCE)
      && hasProperty(PROP_ASYMMETRIC)
      && hasProperty(PROP_KEY_RING)
      && hasProperty(PROP_VERIFICATION_RESULT)
      && hasProperty(PROP_DIGEST);
  }

  public boolean isVerificationResult() {
	Boolean b = (Boolean) getProperty(PROP_VERIFICATION_RESULT);
	return (b == null) ? false : b.booleanValue();
  }		

  public void setVerificationResult(boolean newPropValue) {
      changeProperty(PROP_VERIFICATION_RESULT, new Boolean(newPropValue));
  }		

  public Resource getSign() {
    return (Resource)getProperty(PROP_SIGN);
  }		

  public void setSign(Resource newPropValue) {
    if (newPropValue != null)
      changeProperty(PROP_SIGN, newPropValue);
  }		

  public AsymmetricEncryption getAsymmetric() {
    return (AsymmetricEncryption)getProperty(PROP_ASYMMETRIC);
  }		

  public void setAsymmetric(AsymmetricEncryption newPropValue) {
    if (newPropValue != null)
      changeProperty(PROP_ASYMMETRIC, newPropValue);
  }		

  public Digest getDigest() {
    return (Digest)getProperty(PROP_DIGEST);
  }		

  public void setDigest(Digest newPropValue) {
    if (newPropValue != null)
      changeProperty(PROP_DIGEST, newPropValue);
  }		

  public KeyRing[] getKeyRing() {
    Object propList = getProperty(PROP_KEY_RING);
    if (propList instanceof List)
      return (KeyRing[]) ((List) propList).toArray(new KeyRing[0]);
    else if (propList != null)
      return new KeyRing[] {(KeyRing)propList}; // Handle special case of a single item not contained in a list
    return new KeyRing[0];
  }

  public void addKeyRing(KeyRing newValue) {
    Object propList = getProperty(PROP_KEY_RING);
    List newList;
    if (propList instanceof List)
      newList = (List)propList;
    else {
      newList = new ArrayList();
      if (propList != null)
        newList.add(propList); // Handle special case of a single previous item not contained in a list
    }
    newList.add(newValue);
    changeProperty(PROP_KEY_RING, newList);
  }
  

  public void setKeyRing(KeyRing[] propertyValue) {
    List propList = new ArrayList(propertyValue.length);
    for (int i = 0; i < propertyValue.length; i++) {
      propList.add(propertyValue[i]);
    }
    changeProperty(PROP_KEY_RING, propList);
  }

  public SignedResource getSignedResource() {
    return (SignedResource)getProperty(PROP_SIGNED_RESOURCE);
  }		

  public void setSignedResource(SignedResource newPropValue) {
    if (newPropValue != null)
      changeProperty(PROP_SIGNED_RESOURCE, newPropValue);
  }		

}
