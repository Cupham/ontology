package org.universAAL.ontology.cryptographic;



/**
 * Ontological representation of StreamEncryption in the cryptographic ontology. 
 * Methods included in this class are the mandatory ones for representing an
 * ontological concept in Java classes for the universAAL platform. In addition
 * getters and setters for properties are included.
 * 
 * @author 
 * @author Generated by the OntologyUML2Java transformation of AAL Studio
 */
public abstract class StreamEncryption extends SymetricEncryption {
  public static final String MY_URI = CryptographicOntology.NAMESPACE
    + "StreamEncryption";
  public static final String PROP_INITIALIZATION_VECTOR = CryptographicOntology.NAMESPACE
    + "initializationVector";


  public StreamEncryption () {
    super();
  }
  
  public StreamEncryption (String uri) {
    super(uri);
  }

  public String getClassURI() {
    return MY_URI;
  }
  
  public int getPropSerializationType(String propURI) {
    if (PROP_INITIALIZATION_VECTOR.equals(propURI))
      return PROP_SERIALIZATION_FULL;
    return super.getPropSerializationType(propURI);
  } 

  public boolean isWellFormed() {
	return super.isWellFormed() 
      && hasProperty(PROP_INITIALIZATION_VECTOR);
  }

  public String getInitializationVector() {
    return (String)getProperty(PROP_INITIALIZATION_VECTOR);
  }		

  public void setInitializationVector(String newPropValue) {
    if (newPropValue != null)
      changeProperty(PROP_INITIALIZATION_VECTOR, newPropValue);
  }		

}
