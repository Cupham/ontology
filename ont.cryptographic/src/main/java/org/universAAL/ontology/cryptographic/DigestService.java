/*******************************************************************************
 * Copyright 2016 Universidad Polit√©cnica de Madrid UPM
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 ******************************************************************************/
package org.universAAL.ontology.cryptographic;

import org.universAAL.middleware.rdf.Resource;


/**
 * Ontological representation of DigestService in the cryptographic ontology. 
 * Methods included in this class are the mandatory ones for representing an
 * ontological concept in Java classes for the universAAL platform. In addition
 * getters and setters for properties are included.
 * 
 * @author 
 * @author Generated by the OntologyUML2Java transformation of AAL Studio
 */
public class DigestService extends CryptographicService {
  public static final String MY_URI = CryptographicOntology.NAMESPACE
    + "DigestService";
  public static final String PROP_RESOURCE_TO_DIGEST = CryptographicOntology.NAMESPACE
    + "resourceToDigest";
  public static final String PROP_DIGESTED_TEXT = CryptographicOntology.NAMESPACE
    + "digestedText";
  public static final String PROP_DIGEST_METHOD = CryptographicOntology.NAMESPACE
    + "digestMethod";


  public DigestService () {
    super();
  }
  
  public DigestService (String uri) {
    super(uri);
  }

  public String getClassURI() {
    return MY_URI;
  }
  
  public int getPropSerializationType(String propURI) {
    if (PROP_RESOURCE_TO_DIGEST.equals(propURI))
      return PROP_SERIALIZATION_FULL;
    if (PROP_DIGESTED_TEXT.equals(propURI))
      return PROP_SERIALIZATION_FULL;
    if (PROP_DIGEST_METHOD.equals(propURI))
      return PROP_SERIALIZATION_FULL;
    return super.getPropSerializationType(propURI);
  } 

  public boolean isWellFormed() {
	return super.isWellFormed() 
      && hasProperty(PROP_RESOURCE_TO_DIGEST)
      && hasProperty(PROP_DIGESTED_TEXT)
      && hasProperty(PROP_DIGEST_METHOD);
  }

  public Digest getDigest() {
    return (Digest)getProperty(PROP_DIGEST_METHOD);
  }		

  public void setDigest(Digest newPropValue) {
    if (newPropValue != null)
      changeProperty(PROP_DIGEST_METHOD, newPropValue);
  }		

  public String getDigestedText() {
    return (String)getProperty(PROP_DIGESTED_TEXT);
  }		

  public void setDigestedText(String newPropValue) {
    if (newPropValue != null)
      changeProperty(PROP_DIGESTED_TEXT, newPropValue);
  }		

  public Resource getResourceToDigest() {
    return (Resource)getProperty(PROP_RESOURCE_TO_DIGEST);
  }		

  public void setResourceToDigest(Resource newPropValue) {
    if (newPropValue != null)
      changeProperty(PROP_RESOURCE_TO_DIGEST, newPropValue);
  }		

}
