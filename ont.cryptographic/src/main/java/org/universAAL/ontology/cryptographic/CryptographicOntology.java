
package org.universAAL.ontology.cryptographic;

import org.universAAL.middleware.owl.IntRestriction;
import org.universAAL.middleware.owl.FloatRestriction;
import org.universAAL.middleware.owl.DoubleRestriction;
import org.universAAL.middleware.owl.LongRestriction;
import org.universAAL.middleware.owl.DataRepOntology;
import org.universAAL.middleware.owl.ManagedIndividual;
import org.universAAL.middleware.owl.MergedRestriction;
import org.universAAL.middleware.owl.OntClassInfoSetup;
import org.universAAL.middleware.owl.Ontology;
import org.universAAL.middleware.rdf.TypeMapper;
import org.universAAL.middleware.service.owl.ServiceBusOntology;
import org.universAAL.ontology.location.LocationOntology;
import org.universAAL.ontology.phThing.PhThingOntology;
import org.universAAL.ontology.shape.ShapeOntology;
import org.universAAL.ontology.space.SpaceOntology;

import org.universAAL.middleware.owl.ManagedIndividual;
import org.universAAL.middleware.service.owl.Service;
import org.universAAL.middleware.rdf.Resource;


//import the factory for this ontology
import org.universAAL.ontology.CryptographicFactory;


/**
 * This class provides the main representation of the cryptographic ontology 
 * for the universAAL platform.
 *
 * @author Generated by the OntologyUML2Java transformation of AAL Studio
 */
public final class CryptographicOntology extends Ontology {

  private static CryptographicFactory factory = new CryptographicFactory();
  public static final String NAMESPACE ="http://ontology.universAAL.org/Cryptographic#";
	
  public CryptographicOntology() {
    super(NAMESPACE);
  }

  public void create() {
    Resource r = getInfo();
    r.setResourceComment("");
    r.setResourceLabel("cryptographic");
    addImport(DataRepOntology.NAMESPACE);
    addImport(ServiceBusOntology.NAMESPACE);
    addImport(LocationOntology.NAMESPACE);
    addImport(PhThingOntology.NAMESPACE);
    addImport(ShapeOntology.NAMESPACE);
    addImport(SpaceOntology.NAMESPACE);
    // TODO: Add any additionally imported ontologies here
    

    // ******* Declaration of enumeration classes of the ontology ******* //
    OntClassInfoSetup oci_ChainMode = createNewAbstractOntClassInfo(ChainMode.MY_URI);

    // ******* Declaration of regular classes of the ontology ******* //
    OntClassInfoSetup oci_CryptographicTechnique = createNewAbstractOntClassInfo(CryptographicTechnique.MY_URI);
    OntClassInfoSetup oci_SimpleBlockEncryption = createNewAbstractOntClassInfo(SimpleBlockEncryption.MY_URI);
    OntClassInfoSetup oci_SignedResource = createNewOntClassInfo(SignedResource.MY_URI, factory, 0);
    OntClassInfoSetup oci_SimpleKey = createNewOntClassInfo(SimpleKey.MY_URI, factory, 1);
    OntClassInfoSetup oci_Digest = createNewAbstractOntClassInfo(Digest.MY_URI);
    OntClassInfoSetup oci_CryptograpichService = createNewOntClassInfo(CryptograpichService.MY_URI, factory, 2);
    OntClassInfoSetup oci_Encryption = createNewAbstractOntClassInfo(Encryption.MY_URI);
    OntClassInfoSetup oci_ChainedBlockEncryption = createNewAbstractOntClassInfo(ChainedBlockEncryption.MY_URI);
    OntClassInfoSetup oci_AsymmetricEncryption = createNewAbstractOntClassInfo(AsymmetricEncryption.MY_URI);
    OntClassInfoSetup oci_KeyExchange = createNewAbstractOntClassInfo(KeyExchange.MY_URI);
    OntClassInfoSetup oci_StreamEncryption = createNewAbstractOntClassInfo(StreamEncryption.MY_URI);
    OntClassInfoSetup oci_BlockEncryption = createNewAbstractOntClassInfo(BlockEncryption.MY_URI);
    OntClassInfoSetup oci_EncryptionKey = createNewAbstractOntClassInfo(EncryptionKey.MY_URI);
    OntClassInfoSetup oci_KeyRing = createNewOntClassInfo(KeyRing.MY_URI, factory, 3);
    OntClassInfoSetup oci_CertificationAuthority = createNewOntClassInfo(CertificationAuthority.MY_URI, factory, 4);
    OntClassInfoSetup oci_SymetricEncryption = createNewAbstractOntClassInfo(SymetricEncryption.MY_URI);

    // ******* Add content to enumeration classes of the ontology ******* //

    oci_ChainMode.setResourceComment("");
    oci_ChainMode.setResourceLabel("ChainMode");
    oci_ChainMode.toEnumeration(new ManagedIndividual[] {
       ChainMode.Enc, ChainMode.Dec });


    // ******* Add content to regular classes of the ontology ******* //
    oci_CryptographicTechnique.setResourceComment("");
    oci_CryptographicTechnique.setResourceLabel("CryptographicTechnique");
    oci_CryptographicTechnique.addSuperClass(ManagedIndividual.MY_URI); 

    oci_SimpleBlockEncryption.setResourceComment("");
    oci_SimpleBlockEncryption.setResourceLabel("SimpleBlockEncryption");
    oci_SimpleBlockEncryption.addSuperClass(BlockEncryption.MY_URI); 

    oci_SignedResource.setResourceComment("");
    oci_SignedResource.setResourceLabel("SignedResource");
    oci_SignedResource.addSuperClass(ManagedIndividual.MY_URI); 
    oci_SignedResource.addDatatypeProperty(SignedResource.PROP_SIGNATURE).setFunctional();
    oci_SignedResource.addRestriction(MergedRestriction
      .getAllValuesRestrictionWithCardinality(SignedResource.PROP_SIGNATURE, 
          TypeMapper.getDatatypeURI(String.class), 1, -1));
    oci_SignedResource.addObjectProperty(SignedResource.PROP_ASYMMETRIC).setFunctional();
    oci_SignedResource.addRestriction(MergedRestriction
      .getAllValuesRestrictionWithCardinality(SignedResource.PROP_ASYMMETRIC, 
          AsymmetricEncryption.MY_URI, 1, 1));
    oci_SignedResource.addObjectProperty(SignedResource.PROP_SIGNED_RESOURCE).setFunctional();
    oci_SignedResource.addRestriction(MergedRestriction
      .getAllValuesRestrictionWithCardinality(SignedResource.PROP_SIGNED_RESOURCE, 
          TypeMapper.getDatatypeURI(Resource.class), 1, 1));
    oci_SignedResource.addObjectProperty(SignedResource.PROP_DIGEST).setFunctional();
    oci_SignedResource.addRestriction(MergedRestriction
      .getAllValuesRestrictionWithCardinality(SignedResource.PROP_DIGEST, 
          Digest.MY_URI, 1, 1));

    oci_SimpleKey.setResourceComment("");
    oci_SimpleKey.setResourceLabel("SimpleKey");
    oci_SimpleKey.addSuperClass(EncryptionKey.MY_URI); 
    oci_SimpleKey.addDatatypeProperty(SimpleKey.PROP_KEY_TEXT).setFunctional();
    oci_SimpleKey.addRestriction(MergedRestriction
      .getAllValuesRestrictionWithCardinality(SimpleKey.PROP_KEY_TEXT, 
          TypeMapper.getDatatypeURI(String.class), 1, 1));

    oci_Digest.setResourceComment("");
    oci_Digest.setResourceLabel("Digest");
    oci_Digest.addSuperClass(CryptographicTechnique.MY_URI); 

    oci_CryptograpichService.setResourceComment("");
    oci_CryptograpichService.setResourceLabel("CryptograpichService");
    oci_CryptograpichService.addSuperClass(Service.MY_URI); 

    oci_Encryption.setResourceComment("");
    oci_Encryption.setResourceLabel("Encryption");
    oci_Encryption.addSuperClass(CryptographicTechnique.MY_URI); 
    oci_Encryption.addObjectProperty(Encryption.PROP_KEY).setFunctional();
      	oci_Encryption.addRestriction(MergedRestriction.getAllValuesRestriction(Encryption.PROP_KEY,  
       	EncryptionKey.MY_URI));

    oci_ChainedBlockEncryption.setResourceComment("");
    oci_ChainedBlockEncryption.setResourceLabel("ChainedBlockEncryption");
    oci_ChainedBlockEncryption.addSuperClass(BlockEncryption.MY_URI); 
    oci_ChainedBlockEncryption.addObjectProperty(ChainedBlockEncryption.PROP_CHAIN_MODE).setFunctional();
      	oci_ChainedBlockEncryption.addRestriction(MergedRestriction.getAllValuesRestriction(ChainedBlockEncryption.PROP_CHAIN_MODE,  
       	ChainMode.MY_URI));
    oci_ChainedBlockEncryption.addObjectProperty(ChainedBlockEncryption.PROP_SIMPLE).setFunctional();
    oci_ChainedBlockEncryption.addRestriction(MergedRestriction
      .getAllValuesRestrictionWithCardinality(ChainedBlockEncryption.PROP_SIMPLE, 
          SimpleBlockEncryption.MY_URI, 1, 1));

    oci_AsymmetricEncryption.setResourceComment("");
    oci_AsymmetricEncryption.setResourceLabel("AsymmetricEncryption");
    oci_AsymmetricEncryption.addSuperClass(Encryption.MY_URI); 
    oci_AsymmetricEncryption.addObjectProperty(AsymmetricEncryption.PROP_KEY_RING).setFunctional();
      	oci_AsymmetricEncryption.addRestriction(MergedRestriction.getAllValuesRestriction(AsymmetricEncryption.PROP_KEY_RING,  
       	KeyRing.MY_URI));

    oci_KeyExchange.setResourceComment("");
    oci_KeyExchange.setResourceLabel("KeyExchange");
    oci_KeyExchange.addSuperClass(CryptographicTechnique.MY_URI); 

    oci_StreamEncryption.setResourceComment("");
    oci_StreamEncryption.setResourceLabel("StreamEncryption");
    oci_StreamEncryption.addSuperClass(SymetricEncryption.MY_URI); 
    oci_StreamEncryption.addDatatypeProperty(StreamEncryption.PROP_INITIALIZATION_VECTOR).setFunctional();
    oci_StreamEncryption.addRestriction(MergedRestriction.getCardinalityRestriction(StreamEncryption.PROP_INITIALIZATION_VECTOR, 1, 1));

    oci_BlockEncryption.setResourceComment("");
    oci_BlockEncryption.setResourceLabel("BlockEncryption");
    oci_BlockEncryption.addSuperClass(SymetricEncryption.MY_URI); 
    oci_BlockEncryption.addDatatypeProperty(BlockEncryption.PROP_BLOCK_LENGTH).setFunctional();
    oci_BlockEncryption.addRestriction(MergedRestriction
      .getAllValuesRestrictionWithCardinality(BlockEncryption.PROP_BLOCK_LENGTH, 
          TypeMapper.getDatatypeURI(Integer.class), 1, 1));

    oci_EncryptionKey.setResourceComment("");
    oci_EncryptionKey.setResourceLabel("EncryptionKey");
    oci_EncryptionKey.addSuperClass(ManagedIndividual.MY_URI); 

    oci_KeyRing.setResourceComment("");
    oci_KeyRing.setResourceLabel("KeyRing");
    oci_KeyRing.addSuperClass(EncryptionKey.MY_URI); 
    oci_KeyRing.addDatatypeProperty(KeyRing.PROP_PRIVATE_KEY).setFunctional();
    oci_KeyRing.addRestriction(MergedRestriction
      .getAllValuesRestrictionWithCardinality(KeyRing.PROP_PRIVATE_KEY, 
          TypeMapper.getDatatypeURI(String.class), 0, 1));
    oci_KeyRing.addObjectProperty(KeyRing.PROP_CERTIFICATION_AUTHORITY).setFunctional();
      	oci_KeyRing.addRestriction(MergedRestriction.getAllValuesRestriction(KeyRing.PROP_CERTIFICATION_AUTHORITY,  
       	CertificationAuthority.MY_URI));
    oci_KeyRing.addDatatypeProperty(KeyRing.PROP_PUBLIC_KEY).setFunctional();
    oci_KeyRing.addRestriction(MergedRestriction
      .getAllValuesRestrictionWithCardinality(KeyRing.PROP_PUBLIC_KEY, 
          TypeMapper.getDatatypeURI(String.class), 0, 1));

    oci_CertificationAuthority.setResourceComment("");
    oci_CertificationAuthority.setResourceLabel("CertificationAuthority");
    oci_CertificationAuthority.addSuperClass(KeyRing.MY_URI); 
    oci_CertificationAuthority.addSuperClass(SignedResource.MY_URI); 

    oci_SymetricEncryption.setResourceComment("");
    oci_SymetricEncryption.setResourceLabel("SymetricEncryption");
    oci_SymetricEncryption.addSuperClass(Encryption.MY_URI); 
    oci_SymetricEncryption.addObjectProperty(SymetricEncryption.PROP_SIMPLE_KEY).setFunctional();
    oci_SymetricEncryption.addRestriction(MergedRestriction
      .getAllValuesRestrictionWithCardinality(SymetricEncryption.PROP_SIMPLE_KEY, 
          SimpleKey.MY_URI, 0, 1));

  }
}
